'use strict';

var _workerUtils = require('./worker-utils');

var _tls = require('./tls');

var _tls2 = _interopRequireDefault(_tls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tls = new _tls2.default();
tls.tlserror = function (message) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_ERROR, message));
};
tls.tlscert = function (cert) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_CERT, cert));
};
tls.tlsclose = function () {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_CLOSE));
};
tls.tlsopen = function () {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_OPEN));
};
tls.tlsoutbound = function (buffer) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_OUTBOUND, buffer), [buffer]);
};
tls.tlsinbound = function (buffer) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_INBOUND, buffer), [buffer]);
};

self.onmessage = function (_ref) {
  var _ref$data = _ref.data,
      event = _ref$data.event,
      message = _ref$data.message;

  switch (event) {
    case _workerUtils.EVENT_INBOUND:
      tls.processInbound(message);
      break;
    case _workerUtils.EVENT_OUTBOUND:
      tls.prepareOutbound(message);
      break;
    case _workerUtils.EVENT_HANDSHAKE:
      tls.handshake();
      break;
    case _workerUtils.EVENT_CONFIG:
      tls.configure(message);
      break;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90bHMtd29ya2VyLmpzIl0sIm5hbWVzIjpbInRscyIsIlRMUyIsInRsc2Vycm9yIiwic2VsZiIsInBvc3RNZXNzYWdlIiwiRVZFTlRfRVJST1IiLCJtZXNzYWdlIiwidGxzY2VydCIsIkVWRU5UX0NFUlQiLCJjZXJ0IiwidGxzY2xvc2UiLCJFVkVOVF9DTE9TRSIsInRsc29wZW4iLCJFVkVOVF9PUEVOIiwidGxzb3V0Ym91bmQiLCJFVkVOVF9PVVRCT1VORCIsImJ1ZmZlciIsInRsc2luYm91bmQiLCJFVkVOVF9JTkJPVU5EIiwib25tZXNzYWdlIiwiZGF0YSIsImV2ZW50IiwicHJvY2Vzc0luYm91bmQiLCJwcmVwYXJlT3V0Ym91bmQiLCJFVkVOVF9IQU5EU0hBS0UiLCJoYW5kc2hha2UiLCJFVkVOVF9DT05GSUciLCJjb25maWd1cmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBUUE7Ozs7OztBQUVBLElBQUlBLE1BQU0sSUFBSUMsYUFBSixFQUFWO0FBQ0FELElBQUlFLFFBQUosR0FBZTtBQUFBLFNBQVdDLEtBQUtDLFdBQUwsQ0FBaUIsZ0NBQWNDLHdCQUFkLEVBQTJCQyxPQUEzQixDQUFqQixDQUFYO0FBQUEsQ0FBZjtBQUNBTixJQUFJTyxPQUFKLEdBQWM7QUFBQSxTQUFRSixLQUFLQyxXQUFMLENBQWlCLGdDQUFjSSx1QkFBZCxFQUEwQkMsSUFBMUIsQ0FBakIsQ0FBUjtBQUFBLENBQWQ7QUFDQVQsSUFBSVUsUUFBSixHQUFlO0FBQUEsU0FBTVAsS0FBS0MsV0FBTCxDQUFpQixnQ0FBY08sd0JBQWQsQ0FBakIsQ0FBTjtBQUFBLENBQWY7QUFDQVgsSUFBSVksT0FBSixHQUFjO0FBQUEsU0FBTVQsS0FBS0MsV0FBTCxDQUFpQixnQ0FBY1MsdUJBQWQsQ0FBakIsQ0FBTjtBQUFBLENBQWQ7QUFDQWIsSUFBSWMsV0FBSixHQUFrQjtBQUFBLFNBQVVYLEtBQUtDLFdBQUwsQ0FBaUIsZ0NBQWNXLDJCQUFkLEVBQThCQyxNQUE5QixDQUFqQixFQUF3RCxDQUFDQSxNQUFELENBQXhELENBQVY7QUFBQSxDQUFsQjtBQUNBaEIsSUFBSWlCLFVBQUosR0FBaUI7QUFBQSxTQUFVZCxLQUFLQyxXQUFMLENBQWlCLGdDQUFjYywwQkFBZCxFQUE2QkYsTUFBN0IsQ0FBakIsRUFBdUQsQ0FBQ0EsTUFBRCxDQUF2RCxDQUFWO0FBQUEsQ0FBakI7O0FBRUFiLEtBQUtnQixTQUFMLEdBQWlCLGdCQUF3QztBQUFBLHVCQUE1QkMsSUFBNEI7QUFBQSxNQUFwQkMsS0FBb0IsYUFBcEJBLEtBQW9CO0FBQUEsTUFBYmYsT0FBYSxhQUFiQSxPQUFhOztBQUN2RCxVQUFRZSxLQUFSO0FBQ0UsU0FBS0gsMEJBQUw7QUFDRWxCLFVBQUlzQixjQUFKLENBQW1CaEIsT0FBbkI7QUFDQTtBQUNGLFNBQUtTLDJCQUFMO0FBQ0VmLFVBQUl1QixlQUFKLENBQW9CakIsT0FBcEI7QUFDQTtBQUNGLFNBQUtrQiw0QkFBTDtBQUNFeEIsVUFBSXlCLFNBQUo7QUFDQTtBQUNGLFNBQUtDLHlCQUFMO0FBQ0UxQixVQUFJMkIsU0FBSixDQUFjckIsT0FBZDtBQUNBO0FBWko7QUFjRCxDQWZEIiwiZmlsZSI6InRscy13b3JrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBFVkVOVF9IQU5EU0hBS0UsXG4gIEVWRU5UX0lOQk9VTkQsIEVWRU5UX09VVEJPVU5ELFxuICBFVkVOVF9PUEVOLCBFVkVOVF9DTE9TRSxcbiAgRVZFTlRfQ09ORklHLCBFVkVOVF9DRVJULFxuICBFVkVOVF9FUlJPUixcbiAgY3JlYXRlTWVzc2FnZVxufSBmcm9tICcuL3dvcmtlci11dGlscydcbmltcG9ydCBUTFMgZnJvbSAnLi90bHMnXG5cbnZhciB0bHMgPSBuZXcgVExTKClcbnRscy50bHNlcnJvciA9IG1lc3NhZ2UgPT4gc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVNZXNzYWdlKEVWRU5UX0VSUk9SLCBtZXNzYWdlKSlcbnRscy50bHNjZXJ0ID0gY2VydCA9PiBzZWxmLnBvc3RNZXNzYWdlKGNyZWF0ZU1lc3NhZ2UoRVZFTlRfQ0VSVCwgY2VydCkpXG50bHMudGxzY2xvc2UgPSAoKSA9PiBzZWxmLnBvc3RNZXNzYWdlKGNyZWF0ZU1lc3NhZ2UoRVZFTlRfQ0xPU0UpKVxudGxzLnRsc29wZW4gPSAoKSA9PiBzZWxmLnBvc3RNZXNzYWdlKGNyZWF0ZU1lc3NhZ2UoRVZFTlRfT1BFTikpXG50bHMudGxzb3V0Ym91bmQgPSBidWZmZXIgPT4gc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVNZXNzYWdlKEVWRU5UX09VVEJPVU5ELCBidWZmZXIpLCBbYnVmZmVyXSlcbnRscy50bHNpbmJvdW5kID0gYnVmZmVyID0+IHNlbGYucG9zdE1lc3NhZ2UoY3JlYXRlTWVzc2FnZShFVkVOVF9JTkJPVU5ELCBidWZmZXIpLCBbYnVmZmVyXSlcblxuc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoeyBkYXRhOiB7IGV2ZW50LCBtZXNzYWdlIH0gfSkge1xuICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgY2FzZSBFVkVOVF9JTkJPVU5EOlxuICAgICAgdGxzLnByb2Nlc3NJbmJvdW5kKG1lc3NhZ2UpXG4gICAgICBicmVha1xuICAgIGNhc2UgRVZFTlRfT1VUQk9VTkQ6XG4gICAgICB0bHMucHJlcGFyZU91dGJvdW5kKG1lc3NhZ2UpXG4gICAgICBicmVha1xuICAgIGNhc2UgRVZFTlRfSEFORFNIQUtFOlxuICAgICAgdGxzLmhhbmRzaGFrZSgpXG4gICAgICBicmVha1xuICAgIGNhc2UgRVZFTlRfQ09ORklHOlxuICAgICAgdGxzLmNvbmZpZ3VyZShtZXNzYWdlKVxuICAgICAgYnJlYWtcbiAgfVxufVxuIl19